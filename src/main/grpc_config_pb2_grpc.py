# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import grpc_config_pb2 as grpc__config__pb2


class DatabaseServiceStub(object):
  """option java_multiple_files = true;
  option java_package = "org.querc.cb_grpc.msg.grpc";
  option java_outer_classname = "ConfigCouchbase";

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Connect = channel.unary_unary(
        '/cb_grpc.msg.Main.DatabaseService/Connect',
        request_serializer=grpc__config__pb2.InitiateConnection.SerializeToString,
        response_deserializer=grpc__config__pb2.ConnectionResponse.FromString,
        )


class DatabaseServiceServicer(object):
  """option java_multiple_files = true;
  option java_package = "org.querc.cb_grpc.msg.grpc";
  option java_outer_classname = "ConfigCouchbase";

  """

  def Connect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Connect': grpc.unary_unary_rpc_method_handler(
          servicer.Connect,
          request_deserializer=grpc__config__pb2.InitiateConnection.FromString,
          response_serializer=grpc__config__pb2.ConnectionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cb_grpc.msg.Main.DatabaseService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
